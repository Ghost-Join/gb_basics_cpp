#include <iostream>
#include "functions.hpp"

int main(){
    std::cout << "Task 1. Целочисленный массив, состоящий из элементов 0 и 1, после функции заменяет 0 на 1 и 1 на 0." << '\n';
	//1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. Написать функцию, заменяющую в принятом массиве 0 на 1, 1 на 0 (** без применения if-else, switch, () ? :);
	int nArr[] = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
	const int SIZE = sizeof(nArr)/sizeof(*nArr);
    myFunc::printArray(nArr, SIZE);
    myFunc::noBits(nArr, SIZE);
    myFunc::printArray(nArr, SIZE);
	std::cout << '\n';
	
	//2. Задать пустой целочисленный массив размером 8. Написать функцию, которая с помощью цикла заполнит его значениями 1 4 7 10 13 16 19 22;
    std::cout << "Task 2. Заполнение массива значениями через функцию." << '\n';
	const int SIZE2 = 8;
	int n2Arr[SIZE2]{};
	// std::cout << "Array Size = " << SIZE2 << std::endl;
	// printArray(n2Arr, SIZE2);	//до заполнения массива
    myFunc::inputArray2task(n2Arr, SIZE2);
    myFunc::printArray(n2Arr, SIZE2);
	std::cout << '\n';
	
	//3. * Написать функцию, в которую передается не пустой одномерный целочисленный массив, функция должна вернуть истину если в массиве есть место, в котором сумма левой и правой части массива равны. Примеры: checkBalance([1, 1, 1, || 2, 1]) → true, checkBalance ([2, 1, 1, 2, 1]) → false, checkBalance ([10, || 1, 2, 3, 4]) → true. Абстрактная граница показана символами ||, эти символы в массив не входят.
    std::cout << "Task 3. Функция возвращает истину если в массиве есть место, в котором сумма левой и правой части массива равны." << '\n';
	// int n3Arr1[]{1,1,1,3,2,1};	//расскоментировать нужный массив
	// int n3Arr1[]{2,1,1,2,1};		//расскоментировать нужный массив
	int n3Arr1[]{10,10,1,2,3,4};	//расскоментировать нужный массив
	int SIZE3 = sizeof(n3Arr1)/sizeof(*n3Arr1);
	// std::cout << " SIZE3 = " << SIZE3 << '\n';		//отладочная информация
    myFunc::printArray(n3Arr1, SIZE3);
    if(myFunc::checkBalance(n3Arr1, SIZE3)){
		std::cout << "Result: True \n";
	}
	else{
		std::cout << "Result: False \n";
	}
	std::cout << '\n';
	
	//4. * Написать функцию, которой на вход подаётся одномерный массив и число n (может быть положительным, или отрицательным), при этом функция должна циклически сместить все элементы массива на n позиций. 
    std::cout << "Task 4. Функции на вход подаётся одномерный массив и число n для сдвига элементов на число n.\nДанные указаны в программе: Array[]={1,2,3,4,5,6,7,8,9,0}, N=4" << '\n';
	int n4Arr[]{1,2,3,4,5,6,7,8,9,0};
	int SIZE4 = sizeof(n4Arr)/sizeof(*n4Arr);
	int num4 = 4;
    myFunc::printArray(n4Arr, SIZE4);
    myFunc::shiftArrayRight(n4Arr, SIZE4, num4);
    myFunc::printArray(n4Arr, SIZE4);
	
	//5. ** Написать функцию из первого задания так, чтобы она работала с аргументом переменной длины.
	//6. ** Написать все функции в отдельных файлах в одном пространстве имён, вызвать их на исполнение в основном файле программы используя указатели на функции.
	
	return 0;
}
